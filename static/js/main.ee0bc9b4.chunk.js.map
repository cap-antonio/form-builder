{"version":3,"sources":["components/ThePopover.js","components/config/config.js","components/results/results.js","redux/actions/actions.js","redux/actions/types.js","components/guide.js","components/alert.js","App.js","redux/thunks.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["ThePopover","this","props","hintShow","toggleHint","popoverText","child","isOpen","position","onClickOutside","content","targetRect","popoverRect","arrowColor","arrowSize","arrowStyle","opacity","Component","Config","changeHandler","editMode","editModeSwitch","inputs","resetJsonInputs","resetHintShow","savingLocked","toggleResetHint","className","contentEditable","suppressContentEditableWarning","onBlur","event","currentTarget","innerText","onClick","JSON","stringify","type","Results","color","changeNumber","changeValue","mainForm","saveForm","removeSavedForm","saveHintShow","toggleSaveHint","savedForms","inputsChanged","showSavedJson","map","key","formName","fields","buttons","label","value","Math","random","defaultValue","target","aria-describedby","htmlFor","id","rows","onChange","option","name","colorPicker","data-toggle","data-target","undefined","some","sav","tabIndex","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","saveLocker","status","payload","toggleInputsChangeIndicator","showAlertNotification","Guide","example","guideOpened","Alert","statusPicker","App","jsonInput","isAlertShowed","onInputsChangedThunk","changeNumberThunk","changeValueThunk","resetJsonInputsThunk","saveFormThunk","removeSavedFormThunk","showSaveJsonThunk","toggleGuide","alertStatus","length","connect","dispatch","text","parse","sum","newValue","setTimeout","form","formNameExist","Boolean","window","location","hostname","match","initialState","guideShow","reducer","state","f","Object","assign","updatedSavedForms","splice","store","createStore","applyMiddleware","thunk","rerenderApp","ReactDOM","render","StrictMode","document","getElementById","getState","subscribe","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ee0bc9b4.chunk.js","sourcesContent":["  \r\nimport React, { Component } from 'react'\r\nimport Popover, { ArrowContainer } from 'react-tiny-popover'\r\n\r\nexport default class ThePopover extends Component {\r\n    render() {\r\n        const { hintShow, toggleHint, popoverText, child } = this.props\r\n        return <Popover\r\n        isOpen={hintShow}\r\n        position={'top'}\r\n        onClickOutside={() => toggleHint(false)}\r\n        content={({ position, targetRect, popoverRect }) => (\r\n            <ArrowContainer\r\n                position={position}\r\n                targetRect={targetRect}\r\n                popoverRect={popoverRect}\r\n                arrowColor={'black'}\r\n                arrowSize={10}\r\n                arrowStyle={{ opacity: 0.6 }}\r\n            >\r\n                {popoverText}\r\n            </ArrowContainer>\r\n        )}\r\n    >\r\n        {child}\r\n    </Popover>\r\n      }\r\n}","import React, { Component, Fragment } from 'react'\r\nimport ThePopover from '../ThePopover'\r\n\r\nimport './config.css'\r\n\r\n\r\nexport default class Config extends Component {\r\n    render() {\r\n        const { changeHandler, editMode, editModeSwitch, inputs,\r\n            resetJsonInputs, resetHintShow, savingLocked, toggleResetHint } = this.props\r\n        return (\r\n            <Fragment>\r\n                <div className=\"config_field\">\r\n                    <pre className=\"input_field\"\r\n                        contentEditable=\"true\"\r\n                        suppressContentEditableWarning=\"true\"\r\n                        onBlur={(event) => {\r\n                            changeHandler(event.currentTarget.innerText, inputs)\r\n                            editModeSwitch(false)\r\n                        }}\r\n                        onClick={() => editModeSwitch(true)}>\r\n                        {JSON.stringify(inputs, null, 1)}\r\n                    </pre>\r\n                    <div className=\"hint\">\r\n                        <i className={editMode ? \"fa fa-unlock\" : \"fa fa-lock\"} />\r\n                        {editMode ? \"click out to save\" : \"click on inputs to edit\"}\r\n                        <i className={editMode ? \"fa fa-arrow-down\" : \"fa fa-arrow-up\"} />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"config_status_bar text-center\">\r\n                    <ThePopover hintShow={resetHintShow} toggleHint={toggleResetHint}\r\n                        popoverText={\r\n                            <div className=\"saving_hint arrow\">\r\n                                Nothing to reset. Change input before.\r\n                            </div>\r\n                        }\r\n                        child={\r\n                            <button type=\"button\" className={`btn btn-danger ${savingLocked && `muted`}`}\r\n                                onClick={!savingLocked ? () => resetJsonInputs() : () => toggleResetHint(true)}>\r\n                                reset\r\n                            </button>\r\n                        } />\r\n                </div>    \r\n            </Fragment>\r\n\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport ThePopover from '../ThePopover'\r\n\r\nimport './results.css'\r\n\r\nexport default class Results extends Component {\r\n\r\n    colorPicker(color) {\r\n        switch (color) {\r\n            case 'green':\r\n                return 'btn btn-success'\r\n            case 'red':\r\n                return 'btn btn-danger'\r\n            case 'yellow':\r\n                return 'btn btn-warning'\r\n            case 'grey':\r\n                return 'btn btn-secondary'\r\n            case 'blue':\r\n                return 'btn btn-info'\r\n            case 'white':\r\n                return 'btn btn-light'\r\n            default:\r\n                return 'btn btn-secondary'\r\n        }\r\n    }\r\n    render() {\r\n        const { inputs, changeNumber, editMode,\r\n            changeValue, mainForm, saveForm, removeSavedForm,\r\n            savingLocked, saveHintShow, toggleSaveHint, savedForms,\r\n            inputsChanged, showSavedJson\r\n        } = this.props\r\n        return (\r\n            <div className={mainForm && \"results_field\"}>\r\n                {mainForm\r\n                    ? inputs.map(({ formName, fields, buttons }, key) => (\r\n                        <div key={key}>\r\n                            <div className=\"text-center form_name\">\r\n                                {formName}\r\n                            </div>\r\n                            <form>\r\n                                {fields.map(({ label, type, value }, key) => {\r\n                                    switch (type) {\r\n                                        case 'numberfield':\r\n                                        case 'number':\r\n                                            return <div key={`${Math.random()} + ${key}`} className=\"row pt-3 pl-3\">\r\n                                                <div className=\"form_label\">\r\n                                                    {label ? `${label}:` : \" \"}\r\n                                                </div>\r\n                                                <i className=\"fa fa-minus-circle\" onClick={() => changeNumber(value, label, -1)} />\r\n                                                <div>{value}</div>\r\n                                                <i className=\"fa fa-plus-circle\" onClick={() => changeNumber(value, label, 1)} />\r\n                                            </div>\r\n                                        case 'textfield':\r\n                                        case 'text':\r\n                                            return <div key={`${Math.random()} + ${key}`} className=\"row pt-3 pl-3\">\r\n                                                <div className=\"input-group input-group-sm \">\r\n                                                    <div className=\"form_label mt-1\">\r\n                                                        {label ? `${label}:` : \" \"}\r\n                                                    </div>\r\n                                                    <input type=\"text\" className=\"form-control col-md-6\"\r\n                                                        defaultValue={value}\r\n                                                        onBlur={(event) => changeValue(value, label, event.target.value)}\r\n                                                        aria-describedby=\"inputGroup-sizing-sm\" />\r\n                                                </div>\r\n                                            </div>\r\n                                        case 'textarea':\r\n                                            return <div key={`${Math.random()} + ${key}`} className=\"row pt-3 pl-3\">\r\n                                                <div className=\"form-group form-inline input-group-sm\">\r\n                                                    <label htmlFor=\"textareaField\">\r\n                                                        <div className=\"form_label mt-5\">\r\n                                                            {label ? `${label}:` : \" \"}\r\n                                                        </div>\r\n                                                    </label>\r\n                                                    <textarea className=\"form-control\" id=\"textareaField\" rows=\"3\"\r\n                                                        defaultValue={value}\r\n                                                        onBlur={(event) => changeValue(value, label, event.target.value)} />\r\n                                                </div>\r\n                                            </div>\r\n                                        case 'checkbox':\r\n                                            return <div key={`${Math.random()} + ${key}`} className=\"row pt-3 pl-3\">\r\n                                                <div className=\"form-check form-check-inline\">\r\n                                                    <label className=\"form-check-label\" htmlFor=\"inlineCheckbox\">\r\n                                                        <div className=\"form_label\">\r\n                                                            {label ? `${label}:` : \" \"}\r\n                                                        </div>\r\n                                                    </label>\r\n                                                    <input className=\"form-check-input mt-1\" type=\"checkbox\" id=\"inlineCheckbox\" value=\"option1\" />\r\n                                                </div>\r\n                                            </div>\r\n                                        case 'date':\r\n                                        case 'datefield':\r\n                                            return <div key={`${Math.random()} + ${key}`} className=\"row pt-3 pl-3\">\r\n                                                <label htmlFor=\"datePicker\">\r\n                                                    <div className=\"form_label\">\r\n                                                        {label ? `${label}:` : \" \"}\r\n                                                    </div>\r\n                                                </label>\r\n                                                <input type=\"date\" defaultValue={value}\r\n                                                    id=\"datePicker\" onChange={(event) => changeValue(value, label, event.target.value)} />\r\n                                            </div>\r\n                                        case 'radio':\r\n                                        case 'radio buttons':\r\n                                            return <div key={`${Math.random()} + ${key}`} className=\"row pt-3 pl-3\">\r\n                                                <label htmlFor=\"datePicker\">\r\n                                                    <div className=\"form_label\">\r\n                                                        {label ? `${label}:` : \" \"}\r\n                                                    </div>\r\n                                                </label>\r\n                                                {value && value.map(option => (\r\n                                                    <div key={`${Math.random()} + ${option}`} className=\"col-sm-10\">\r\n                                                        <div className=\"form-check\">\r\n                                                            <input className=\"form-check-input\" type=\"radio\" name={label} id={option} value={option} />\r\n                                                            <label className=\"form-check-label\" htmlFor={option}>\r\n                                                                {option ? option : \"Forgot add options?\"}\r\n                                                            </label>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                ))}\r\n                                            </div>\r\n                                        default:\r\n                                            return <div key={`${Math.random()} + ${key}`} className=\"row pt-3 pl-3\">\r\n                                                Check your inputs please with our guide\r\n                                           </div>\r\n                                    }\r\n                                })}\r\n                                <div className=\"row pt-3 pl-3\">\r\n                                    {buttons && buttons.map(({ label, color }) => (\r\n                                        <button key={`${Math.random()}+${label}`} type=\"button\" className={`${this.colorPicker(color)} btn-sm mx-1 mt-2`}>\r\n                                            <div className=\"form_label pr-0\">\r\n                                                {label ? `${label}` : \"Noname\"}\r\n                                            </div>\r\n                                        </button>\r\n                                    ))}\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    ))\r\n                    : savedForms.map(({ formName, fields, buttons }, key) => (\r\n                        <div key={`${Math.random()} + ${key}`} className=\"card mb-3\">\r\n                            <div className=\"card-body\">\r\n                                <h5 className=\"card-title\">{formName ? formName : \"Noname\"}</h5>\r\n                                <div className=\"card-text\">\r\n                                    {fields.map(({ label, type, value }, key) => {\r\n                                        switch (type) {\r\n                                            case 'numberfield':\r\n                                            case 'number':\r\n                                                return <div key={`${Math.random()} + ${key}`} className=\"row pt-3 pl-3\">\r\n                                                    <div className=\"form_label\">\r\n                                                        {label ? `${label}:` : \" \"}\r\n                                                    </div>\r\n                                                    <i className=\"fa fa-minus-circle\" />\r\n                                                    <div>{value}</div>\r\n                                                    <i className=\"fa fa-plus-circle\" />\r\n                                                </div>\r\n                                            case 'textfield':\r\n                                            case 'text':\r\n                                                return <div key={`${Math.random()} + ${key}`} className=\"row pt-3 pl-3\">\r\n                                                    <div className=\"input-group input-group-sm \">\r\n                                                        <div className=\"form_label mt-1\">\r\n                                                            {label ? `${label}:` : \" \"}\r\n                                                        </div>\r\n                                                        <input type=\"text\" className=\"form-control col-md-6 col-6\"\r\n                                                            defaultValue={value} />\r\n                                                    </div>\r\n                                                </div>\r\n                                            case 'textarea':\r\n                                                return <div key={`${Math.random()} + ${key}`} className=\"row pt-3 pl-3\">\r\n                                                    <div className=\"form-group form-inline input-group-sm\">\r\n                                                        <label htmlFor=\"textareaField\">\r\n                                                            <div className=\"form_label mt-5\">\r\n                                                                {label ? `${label}:` : \" \"}\r\n                                                            </div>\r\n                                                        </label>\r\n                                                        <textarea className=\"form-control\" id=\"textareaField\" rows=\"3\"\r\n                                                            defaultValue={value} />\r\n                                                    </div>\r\n                                                </div>\r\n                                            case 'checkbox':\r\n                                                return <div key={`${Math.random()} + ${key}`} className=\"row pt-3 pl-3\">\r\n                                                    <div className=\"form-check form-check-inline\">\r\n                                                        <label className=\"form-check-label\" htmlFor=\"inlineCheckbox\">\r\n                                                            <div className=\"form_label\">\r\n                                                                {label ? `${label}:` : \" \"}\r\n                                                            </div>\r\n                                                        </label>\r\n                                                        <input className=\"form-check-input mt-1\" type=\"checkbox\" id=\"inlineCheckbox\" value=\"option1\" />\r\n                                                    </div>\r\n                                                </div>\r\n                                            case 'date':\r\n                                            case 'datefield':\r\n                                                return <div key={`${Math.random()} + ${key}`} className=\"row pt-3 pl-3\">\r\n                                                    <label htmlFor=\"datePicker\">\r\n                                                        <div className=\"form_label\">\r\n                                                            {label ? `${label}:` : \" \"}\r\n                                                        </div>\r\n                                                    </label>\r\n                                                    <input type=\"date\" defaultValue={value}\r\n                                                        id=\"datePicker\" />\r\n                                                </div>\r\n                                            case 'radio':\r\n                                            case 'radio buttons':\r\n                                                return <div key={`${Math.random()} + ${key}`} className=\"row pt-3 pl-3 col-sm-10\">\r\n                                                    <label htmlFor=\"datePicker\">\r\n                                                        <div className=\"form_label\">\r\n                                                            {label ? `${label}:` : \" \"}\r\n                                                        </div>\r\n                                                    </label>\r\n                                                    {value && value.map(option => (\r\n                                                        <div key={`${Math.random()} + ${option}`} className=\"col-sm-10\">\r\n                                                            <div className=\"form-check\">\r\n                                                                <input className=\"form-check-input\" type=\"radio\" name={label} id={option} value={option} />\r\n                                                                <label className=\"form-check-label\" htmlFor=\"gridRadios\">\r\n                                                                    {option ? option : \"Forgot add options?\"}\r\n                                                                </label>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    ))}\r\n                                                </div>\r\n                                            default:\r\n                                                return <div key={`${Math.random()} + ${key}`} className=\"row pt-3 pl-3\">\r\n                                                    Check your inputs please with our guide\r\n                                            </div>\r\n                                        }\r\n                                    })}\r\n                                    <div className=\"row pt-3 pl-3\">\r\n                                        {buttons && buttons.map(({ label, color }) => (\r\n                                            <button key={`${Math.random()}+${label}`} type=\"button\"\r\n                                                className={`${this.colorPicker(color)} btn-sm mx-1 mt-2`}>\r\n                                                <div className=\"form_label pr-0\">\r\n                                                    {label ? `${label}` : \"Noname\"}\r\n                                                </div>\r\n                                            </button>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-footer border-success\">\r\n                                <button type=\"button\" className=\"btn btn-success btn-sm mx-1 mt-2\"\r\n                                    data-toggle={inputsChanged && \"modal\"} data-target=\"#Modal\"\r\n                                    onClick={inputsChanged\r\n                                        ? undefined\r\n                                        : () => showSavedJson(savedForms[key])}>\r\n                                    Show JSON\r\n                                </button>\r\n\r\n                                <button type=\"button\" className=\"btn btn-danger btn-sm mx-1 mt-2\"\r\n                                    onClick={() => removeSavedForm(key, this.props.savedForms\r\n                                        .some(sav => sav.formName === this.props.inputs[0].formName))}>\r\n                                    Remove\r\n                            </button>\r\n                            </div>\r\n                            <div className=\"modal fade bd-example-modal-sm\" id=\"Modal\" tabIndex=\"-1\"\r\n                                role=\"dialog\" aria-labelledby=\"ModalLabel\" aria-hidden=\"true\">\r\n                                <div className=\"modal-dialog modal-sm\" role=\"document\">\r\n                                    <div className=\"modal-content\">\r\n                                        <div className=\"modal-header\">\r\n                                            <h5 className=\"modal-title\" id=\"ModalLabel\">\r\n                                                You have unsaved inputs at the top\r\n                                            </h5>\r\n                                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\"\r\n                                                aria-label=\"Close\">\r\n                                                <span aria-hidden=\"true\">&times;</span>\r\n                                            </button>\r\n                                        </div>\r\n                                        <div className=\"modal-body\">\r\n                                            Are you sure you want to replace it?\r\n                                        </div>\r\n                                        <div className=\"modal-footer\">\r\n                                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">\r\n                                                Cancel\r\n                                            </button>\r\n                                            <button type=\"button\" className=\"btn btn-success\" data-dismiss=\"modal\"\r\n                                                onClick={() => showSavedJson(savedForms[key])}>\r\n                                                Show Json\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ))\r\n\r\n\r\n                }\r\n                {mainForm && <div className=\"results_status_bar text-center \">\r\n                    <hr />\r\n                    <ThePopover hintShow={saveHintShow} toggleHint={toggleSaveHint}\r\n                        popoverText={\r\n                            <div className=\"saving_hint arrow\">\r\n                                You should change at least a form name\r\n                            </div>\r\n                        }\r\n                        child={\r\n                            <button id=\"settings_button\" type=\"button\" className={`btn btn-success m-0 ${(savingLocked || editMode) && `muted`}`}\r\n                                onClick={\r\n                                    !savingLocked\r\n                                        ? () => saveForm(\r\n                                            inputs,\r\n                                            this.props.savedForms.some(sav => sav.formName === this.props.inputs[0].formName))\r\n                                        : () => toggleSaveHint(true)}\r\n                            >\r\n                                {savingLocked\r\n                                    ? <i className=\"fa fa-lock\" />\r\n                                    : editMode\r\n                                        ? <span className=\"spinner-border spinner-border-sm mr-2 ml-2\"\r\n                                            role=\"status\" aria-hidden=\"true\" />\r\n                                        : \"save\"}\r\n                            </button>\r\n                        } />\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import { \r\n    ON_INPUTS_CHANGE, CHANGE_NUMBER, CHANGE_VALUE, \r\n    EDIT_MODE_SWITCH, RESET_JSON_INPUTS, SAVE_FORM, SAVE_LOCKER, \r\n    REMOVE_SAVED_FORM, TOGGLE_SAVE_HINT, TOGGLE_RESET_HINT, \r\n    SHOW_SAVED_JSON, TOGGEL_INPUTS_CHANGE_INDICATOR, TOGGLE_GUIDE_WINDOW, \r\n    SHOW_NOTIFICATION, HIDE_NOTIFICATION \r\n} from './types'\r\n\r\nexport const onInputsChange = (newInput) => {\r\n    return {\r\n        type: ON_INPUTS_CHANGE,\r\n        payload: newInput\r\n    }\r\n}\r\n\r\nexport const changeNumber = (value, name, sum) => {\r\n    return {\r\n        type: CHANGE_NUMBER,\r\n        payload: {value, name, sum}\r\n    }\r\n}\r\n\r\nexport const changeValue = (value, name, newValue) => {\r\n    return {\r\n        type: CHANGE_VALUE,\r\n        payload: {value, name, newValue}\r\n    }\r\n}\r\n\r\nexport const editModeSwitch = (status) => {\r\n    return {\r\n        type: EDIT_MODE_SWITCH,\r\n        payload: status\r\n    }\r\n}\r\n\r\nexport const resetJsonInputs = () => {\r\n    return {\r\n        type: RESET_JSON_INPUTS\r\n    }\r\n}\r\n\r\nexport const saveForm = (form) => {\r\n    return {\r\n        type: SAVE_FORM,\r\n        payload: form\r\n    }\r\n}\r\n\r\nexport const saveLocker = (status) => {\r\n    return {\r\n        type: SAVE_LOCKER,\r\n        payload: status\r\n    }\r\n}\r\n\r\nexport const removeSavedForm = (key) => {\r\n    return {\r\n        type: REMOVE_SAVED_FORM,\r\n        payload: key\r\n    }\r\n}\r\n\r\nexport const showSavedJson = (payload) => {\r\n    return {\r\n        type: SHOW_SAVED_JSON,\r\n        payload\r\n    }\r\n}\r\n\r\nexport const toggleInputsChangeIndicator = (status) => {\r\n    return {\r\n        type: TOGGEL_INPUTS_CHANGE_INDICATOR,\r\n        payload: status\r\n    }\r\n}\r\n\r\nexport const toggleSaveHint = (status) => {\r\n    return {\r\n        type: TOGGLE_SAVE_HINT,\r\n        payload: status\r\n    }\r\n}\r\n\r\nexport const toggleResetHint = (status) => {\r\n    return {\r\n        type: TOGGLE_RESET_HINT,\r\n        payload: status\r\n    }\r\n}\r\n\r\nexport const toggleGuide = () => {\r\n    return {\r\n        type: TOGGLE_GUIDE_WINDOW,\r\n    }\r\n}\r\n\r\nexport const showAlertNotification = (status) => {\r\n    return {\r\n        type: SHOW_NOTIFICATION,\r\n        payload: status\r\n    }\r\n}\r\n\r\nexport const hideAlertNotification = () => {\r\n    return {\r\n        type: HIDE_NOTIFICATION\r\n    }\r\n}","export const ON_INPUTS_CHANGE = 'ON_INPUTS_CHANGE'\r\nexport const CHANGE_NUMBER = 'CHANGE_NUMBER'\r\nexport const CHANGE_VALUE = 'CHANGE_VALUE'\r\n\r\nexport const EDIT_MODE_SWITCH = 'EDIT_MODE_SWITCH'\r\nexport const RESET_JSON_INPUTS = 'RESET_JSON_INPUTS'\r\nexport const SAVE_FORM = 'SAVE_FORM'\r\nexport const SAVE_LOCKER = 'SAVE_LOCKER'\r\nexport const REMOVE_SAVED_FORM = 'REMOVE_SAVED_FORM'\r\nexport const SHOW_SAVED_JSON = 'SHOW_SAVED_JSON'\r\n\r\nexport const TOGGEL_INPUTS_CHANGE_INDICATOR = 'TOGGEL_INPUTS_CHANGE_INDICATOR'\r\nexport const TOGGLE_SAVE_HINT = 'TOGGLE_SAVE_HINT'\r\nexport const TOGGLE_RESET_HINT = 'TOGGLE_RESET_HINT'\r\nexport const TOGGLE_GUIDE_WINDOW = 'TOGGLE_GUIDE_WINDOW'\r\n\r\nexport const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION'\r\nexport const HIDE_NOTIFICATION = 'HIDE_NOTIFICATION'","import React, { Component } from 'react'\r\n\r\nimport './guide.css'\r\n\r\nexport default class Guide extends Component {\r\n    example = [{\r\n        formName: \"All values should be in quote\",\r\n        fields: [\r\n            {\r\n                label: 'string',\r\n                type: `'numberfield' || 'textfield' || 'textarea' || 'checkbox' || 'datefield' || 'radio'`,\r\n                value: 'string',\r\n            },\r\n            {\r\n                label: 'string',\r\n                type: 'numberfield',\r\n                value: 365,\r\n            },\r\n            {\r\n                label: 'string',\r\n                type: 'date',\r\n                value: 'YYYY-MM-DD',\r\n            },\r\n            {\r\n                label: 'string',\r\n                type: 'checkbox',\r\n                value: null,\r\n            },\r\n            {\r\n                label: 'string',\r\n                type: 'radio',\r\n                value: [\r\n                    'First',\r\n                    'Second',\r\n                    '...'\r\n                ],\r\n            },\r\n        ],\r\n        buttons: [\r\n            {\r\n                \"label\": 'First',\r\n                \"color\": `'green' || 'red' || 'yellow' || 'grey' || 'blue' || 'white'`\r\n            },\r\n            {\r\n                \"label\": 'Next button label',\r\n                \"color\": 'yellow'\r\n            },\r\n        ]\r\n    }\r\n    ]\r\n    render() {\r\n        const {guideOpened} = this.props\r\n        return (\r\n            <pre className = {guideOpened ? \"guide opened\": \"guide\"}>\r\n                <div className = \"guide_name\">Syntax Guide</div>\r\n                <ul className = \"guide_warning\">\r\n                    <li>Please do not change the name of JSON data but only value</li>\r\n                    <li>Use copy-paste to add new object</li>\r\n                    <li>Keep all curly braces and square brackets</li>\r\n                </ul>\r\n                <div className = \"guide_warning\">Example of correct inputs:</div>\r\n                {JSON.stringify(this.example, null, 1)}\r\n            </pre>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nimport './alert.css'\r\n\r\nexport default class Alert extends Component {\r\n\r\n    statusPicker(status) {\r\n        switch (status) {\r\n            case 'success':\r\n                return <div>\r\n                    <strong>\r\n                        <i className=\"fa fa-check-circle alert_i\" />\r\n                        You got it!\r\n                    </strong> New form saved.\r\n                </div>\r\n            case 'secondary':\r\n                return <div>\r\n                    <strong>\r\n                        <i className=\"fa fa-exclamation-circle alert_i\" />\r\n                        Done!\r\n                    </strong> A new JSON has been set.\r\n                </div>\r\n            case 'warning':\r\n                return <div>\r\n                    <strong>\r\n                        <i className=\"fa fa-recycle alert_i\" />\r\n                        Moved away!\r\n                    </strong> You can create new form.\r\n                </div>\r\n            default:\r\n                return <div>\r\n                <strong>\r\n                    Oops!\r\n                </strong> This message should not appear.\r\n            </div>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { status } = this.props\r\n        return (\r\n            <div className={`alert alert-${status} alert_status`}>\r\n                {this.statusPicker(status)}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport Config from './components/config/config';\nimport Results from './components/results/results';\nimport { connect } from 'react-redux';\nimport {\n  editModeSwitch,\n  saveLocker, toggleSaveHint,\n  toggleResetHint,\n  toggleGuide,\n} from './redux/actions/actions';\nimport {\n  saveFormThunk, resetJsonInputsThunk, removeSavedFormThunk,\n  onInputsChangedThunk, changeValueThunk, changeNumberThunk,\n  showSaveJsonThunk\n} from './redux/thunks';\n\nimport './App.css'\nimport Guide from './components/guide';\nimport Alert from './components/alert';\n\nclass App extends Component {\n  render() {\n    const { jsonInput, savedForms, editMode, mainForm,\n      saveHintShow, resetHintShow, savingLocked, isAlertShowed,\n      onInputsChangedThunk, changeNumberThunk, changeValueThunk,\n      editModeSwitch, resetJsonInputsThunk, saveFormThunk,\n      removeSavedFormThunk, toggleSaveHint, toggleResetHint,\n      inputsChanged, showSaveJsonThunk, guideOpened, toggleGuide,\n      alertStatus } = this.props\n    return (\n      <div className=\"container\">\n        {isAlertShowed && <Alert status = {alertStatus} />}\n        <h3 className=\"row justify-content-center pt-3\">\n          JSON To Form Builder\n        </h3>\n        <div className=\"row p-3 justify-content-center\">\n          <div className=\"main_card row col-10\">\n            <div>\n              <i className={`fa ${guideOpened ? \"fa-times-circle opened\" : \"fa-question-circle\"} guide_toggle `}\n                onClick={() => toggleGuide()} />\n            </div>\n            <div className=\"col-6 pt-3 border-right\">\n              <h5 className=\"text-center\">\n                JSON inputs:\n              </h5>\n              <Config inputs={jsonInput} changeHandler={onInputsChangedThunk}\n                editMode={editMode} editModeSwitch={editModeSwitch}\n                resetJsonInputs={resetJsonInputsThunk} savingLocked={savingLocked}\n                resetHintShow={resetHintShow} toggleResetHint={toggleResetHint}\n              />\n            </div>\n            <div className=\"grid-divider\"><hr /></div>\n            <div><Guide guideOpened={guideOpened} /></div>\n            <div className=\"col-6 pt-3\">\n              <h5 className=\"text-center\">\n                Form result:\n              </h5>\n              <Results inputs={jsonInput} changeHandler={onInputsChangedThunk}\n                changeNumber={changeNumberThunk} editMode={editMode}\n                resetJsonInputs={resetJsonInputsThunk} changeValue={changeValueThunk}\n                mainForm={mainForm} saveForm={saveFormThunk}\n                savingLocked={savingLocked} saveHintShow={saveHintShow}\n                toggleSaveHint={toggleSaveHint} savedForms={savedForms}\n                showSavedJson={showSaveJsonThunk}\n              />\n            </div>\n          </div>\n        </div>\n        {/* Render saved Forms */}\n        {savedForms.length > 0 &&\n          <div>\n            <h3 className=\"row justify-content-center\">Saved Forms:</h3>\n            <div className=\"row p-3\">\n              <div className=\"card-columns\">\n                <Results inputs={jsonInput} savedForms={savedForms}\n                  removeSavedForm={removeSavedFormThunk} inputsChanged={inputsChanged}\n                  showSavedJson={showSaveJsonThunk}\n                />\n              </div>\n            </div>\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = ({ jsonInput, savedForms, editMode, mainForm, saveHintShow, resetHintShow, savingLocked, inputsChanged, guideOpened, isAlertShowed, alertStatus }) => {\n  return {\n    jsonInput, savedForms, editMode, mainForm, saveHintShow,\n    resetHintShow, savingLocked, inputsChanged, guideOpened,\n    isAlertShowed, alertStatus\n  }\n}\n\nexport default connect(mapStateToProps,\n  {\n    onInputsChangedThunk, changeNumberThunk, changeValueThunk, editModeSwitch,\n    resetJsonInputsThunk, saveFormThunk, saveLocker, removeSavedFormThunk,\n    toggleSaveHint, toggleResetHint, showSaveJsonThunk, toggleGuide\n  }\n)(App)","import { saveLocker, saveForm, resetJsonInputs, removeSavedForm, onInputsChange, \r\n    toggleInputsChangeIndicator, changeValue, changeNumber, showAlertNotification, \r\n    hideAlertNotification, showSavedJson } from \"./actions/actions\"\r\n\r\nexport const onInputsChangedThunk = (payload, jsonInput) => {\r\n    return (dispatch) => {\r\n        let text = JSON.parse(payload)\r\n        if (JSON.stringify(text[0]) === JSON.stringify(jsonInput[0])) {\r\n            return\r\n        }\r\n        dispatch(onInputsChange(text[0]))\r\n        dispatch(saveLocker(false))\r\n        dispatch(toggleInputsChangeIndicator(true))\r\n    }\r\n}\r\n\r\nexport const changeValueThunk = (value, name, newValue) => {\r\n    return (dispatch) => {\r\n        dispatch(changeValue(value, name, newValue))\r\n        if(value === newValue) {\r\n            return\r\n        }\r\n        dispatch(toggleInputsChangeIndicator(true))\r\n    }\r\n}\r\n\r\nexport const changeNumberThunk = (value, name, sum) => {\r\n    return (dispatch) => {\r\n        dispatch(changeNumber(value, name, sum))\r\n        dispatch(toggleInputsChangeIndicator(true))\r\n    }\r\n}\r\n\r\nexport const resetJsonInputsThunk = () => {\r\n    return (dispatch) => {\r\n        dispatch(resetJsonInputs())\r\n        dispatch(showAlertNotification('secondary'))\r\n        dispatch(toggleInputsChangeIndicator(false))\r\n        setTimeout(() => {\r\n            dispatch(hideAlertNotification())\r\n          }, 3000)\r\n    }\r\n}\r\n\r\nexport const saveFormThunk = (form, formNameExist) => {\r\n    return (dispatch) => {\r\n        if (formNameExist) {\r\n            dispatch(saveLocker(true))\r\n        } else {\r\n            dispatch(saveForm(form))\r\n            dispatch(resetJsonInputs())\r\n            dispatch(toggleInputsChangeIndicator(false))\r\n            dispatch(showAlertNotification('success'))\r\n            setTimeout(() => {\r\n                dispatch(hideAlertNotification())\r\n              }, 3000)\r\n        }\r\n    }\r\n}\r\n\r\nexport const removeSavedFormThunk = (key, formNameExist) => {\r\n    return (dispatch) => {\r\n        dispatch(removeSavedForm(key))\r\n        dispatch(showAlertNotification('warning'))\r\n        setTimeout(() => {\r\n            dispatch(hideAlertNotification())\r\n          }, 3000)\r\n        if (formNameExist) {\r\n            dispatch(saveLocker(true))\r\n        }\r\n        dispatch(saveLocker(false))\r\n    }\r\n}\r\n\r\nexport const showSaveJsonThunk = (payload) => {\r\n    return (dispatch) => {\r\n        dispatch(showSavedJson(payload))\r\n        dispatch(showAlertNotification('secondary'))\r\n        dispatch(toggleInputsChangeIndicator(false))\r\n        setTimeout(() => {\r\n            dispatch(hideAlertNotification())\r\n          }, 3000)\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ON_INPUTS_CHANGE, CHANGE_NUMBER, CHANGE_VALUE, EDIT_MODE_SWITCH, \r\n    SAVE_FORM, RESET_JSON_INPUTS, SAVE_LOCKER, REMOVE_SAVED_FORM, \r\n    TOGGLE_SAVE_HINT, TOGGLE_RESET_HINT, SHOW_SAVED_JSON, \r\n    TOGGEL_INPUTS_CHANGE_INDICATOR, TOGGLE_GUIDE_WINDOW, SHOW_NOTIFICATION, HIDE_NOTIFICATION } from \"./actions/types\"\r\n\r\nconst initialState = {\r\n    jsonInput: [\r\n        {\r\n            formName: 'Hello Veeam',\r\n            fields: [\r\n                {\r\n                    label: 'name',\r\n                    type: 'textfield',\r\n                    value: \"Anton\",\r\n                },\r\n                {\r\n                    label: 'made',\r\n                    type: 'textarea',\r\n                    value: \"The form builder\",\r\n                },\r\n                {\r\n                    label: 'spent hours',\r\n                    type: 'numberfield',\r\n                    value: 16,\r\n                },\r\n                {\r\n                    label: 'Pick date',\r\n                    type: 'date',\r\n                    value: '2020-08-31',\r\n                },\r\n                {\r\n                    label: `Call to say 'Good work!'`,\r\n                    type: 'checkbox',\r\n                    value: null,\r\n                },\r\n                {\r\n                    label: \"Options to choose\",\r\n                    type: 'radio',\r\n                    value: [\r\n                        'Be',\r\n                        'Not To Be'\r\n                    ],\r\n                },\r\n            ],\r\n            buttons: [\r\n                {\r\n                    label: 'Hire',\r\n                    color: 'green'\r\n                },\r\n                {\r\n                    label: 'Sorry-mail',\r\n                    color: 'yellow'\r\n                },\r\n            ]\r\n        }\r\n    ],\r\n    savedForms: [\r\n        {\r\n            formName: 'Sign in page',\r\n            fields: [\r\n                {\r\n                    label: 'name',\r\n                    type: 'textfield',\r\n                    value: \" \",\r\n                },\r\n                {\r\n                    label: 'surname',\r\n                    type: 'textfield',\r\n                    value: \" \",\r\n                },\r\n                {\r\n                    label: 'remember me',\r\n                    type: 'checkbox',\r\n                    value: null,\r\n                },\r\n            ],\r\n            buttons: [\r\n                {\r\n                    label: 'Sign in',\r\n                    color: 'blue'\r\n                },\r\n                {\r\n                    label: 'Sign up',\r\n                    color: 'white'\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            formName: 'Questionnaire',\r\n            fields: [\r\n                {\r\n                    label: 'Today is',\r\n                    type: 'radio',\r\n                    value: [\r\n                        'Monday',\r\n                        'Day',\r\n                        \"Monkey\"\r\n                    ],\r\n                },\r\n                {\r\n                    label: '2020 is',\r\n                    type: 'radio',\r\n                    value: [\r\n                        'amazing year',\r\n                        'the End',\r\n                        \"next please...\"\r\n                    ],\r\n                },\r\n                {\r\n                    label: 'Apply form',\r\n                    type: 'checkbox',\r\n                    value: null,\r\n                },\r\n            ],\r\n            buttons: [\r\n                {\r\n                    label: 'Check answers',\r\n                    color: 'blue'\r\n                },\r\n\r\n            ]\r\n        }\r\n    ],\r\n    isAlertShowed: false,\r\n    alertStatus: null,\r\n    editMode: false,\r\n    mainForm: true,\r\n    savingLocked: false,\r\n    saveHintShow: false,\r\n    resetHintShow: false,\r\n    guideShow: false,\r\n    inputsChanged: true,\r\n    guideOpened: false\r\n}\r\n\r\nconst reducer = (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        // Handle JSON inputs changes\r\n        case ON_INPUTS_CHANGE:\r\n            return {\r\n                ...state,\r\n                jsonInput: [payload],\r\n            }\r\n        // Increment and Decrement for the number type of field\r\n        case CHANGE_NUMBER:\r\n            return {\r\n                ...state,\r\n                jsonInput: [{\r\n                    ...state.jsonInput[0],\r\n                    fields: state.jsonInput[0].fields.map(\r\n                        f => (f.value === payload.value && f.label === payload.name\r\n                            ? Object.assign(f, { value: payload.value + payload.sum })\r\n                            : f)\r\n                    )\r\n                }]\r\n            }\r\n        // Changing of VALUE attribute of field\r\n        case CHANGE_VALUE:\r\n            return {\r\n                ...state,\r\n                jsonInput: [{\r\n                    ...state.jsonInput[0],\r\n                    fields: state.jsonInput[0].fields.map(\r\n                        f => (f.value === payload.value && f.label === payload.name\r\n                            ? Object.assign(f, { value: payload.newValue })\r\n                            : f)\r\n                    )\r\n                }]\r\n            }\r\n        // Understanding if JSON inputs is being edited  \r\n        case EDIT_MODE_SWITCH:\r\n            return {\r\n                ...state,\r\n                editMode: payload\r\n            }\r\n        // Reset btn to render JSON template\r\n        case RESET_JSON_INPUTS:\r\n            return {\r\n                ...state,\r\n                jsonInput: [\r\n                    {\r\n                        formName: 'Template',\r\n                        fields: [\r\n                            {\r\n                                label: 'Good start',\r\n                                type: 'text',\r\n                                value: 'to change a form name left',\r\n                            },\r\n                            {\r\n                                label: 'When',\r\n                                type: 'date',\r\n                                value: \"1999-03-31\",\r\n                            },\r\n                            {\r\n                                label: `Input window `,\r\n                                type: 'textarea',\r\n                                value: 'is vertically resizable. Drag the bottom right corner. ',\r\n                            },\r\n                            {\r\n                                label: \"Please check the syntax\",\r\n                                type: 'radio',\r\n                                value: [\r\n                                    'with Help button',\r\n                                    'or edit left template JSON'\r\n                                ],\r\n                            },\r\n                        ],\r\n                        buttons: [\r\n                            {\r\n                                label: 'Go on!',\r\n                                color: 'blue'\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        // Save current form to savedForms\r\n        case SAVE_FORM:\r\n            return {\r\n                ...state,\r\n                savedForms: [\r\n                    ...state.savedForms,\r\n                    payload[0]\r\n                ]\r\n            }\r\n        // A preventer to duplicating of saved forms\r\n        case SAVE_LOCKER:\r\n            return {\r\n                ...state,\r\n                savingLocked: payload\r\n            }\r\n        // Remove choosen saved forms\r\n        case REMOVE_SAVED_FORM:\r\n            let updatedSavedForms = [...state.savedForms]\r\n            updatedSavedForms.splice(payload, 1)\r\n            return {\r\n                ...state,\r\n                savedForms: updatedSavedForms\r\n            }\r\n        // Show the save button popover \r\n        case TOGGLE_SAVE_HINT: \r\n            return {\r\n                ...state,\r\n                saveHintShow: payload\r\n            }\r\n        // Show the reset button popover\r\n        case TOGGLE_RESET_HINT: \r\n            return {\r\n                ...state,\r\n                resetHintShow: payload\r\n            }\r\n        // Set a choosen JSON as main to view and edit\r\n        case SHOW_SAVED_JSON:\r\n            return {\r\n                ...state,\r\n                jsonInput: [payload]\r\n            }\r\n        // Indicator to watch if inputs changed\r\n        case TOGGEL_INPUTS_CHANGE_INDICATOR:\r\n            return {\r\n                ...state,\r\n                inputsChanged: payload\r\n            }\r\n        // Toggle guide component\r\n        case TOGGLE_GUIDE_WINDOW:\r\n            return {\r\n                ...state,\r\n                guideOpened: !state.guideOpened\r\n            }\r\n        // Show alert with status of action\r\n        case SHOW_NOTIFICATION:\r\n            return {\r\n                ...state,\r\n                isAlertShowed: true,\r\n                alertStatus: payload\r\n            }\r\n        case HIDE_NOTIFICATION:\r\n            return {\r\n                ...state,\r\n                isAlertShowed: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer ","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport reducer from './reducer'\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk))\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store'\n\n\nlet rerenderApp = (state) => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n  );\n}\n\nrerenderApp(store.getState())\nstore.subscribe(rerenderApp)\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}